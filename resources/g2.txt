program typename action action_list action_block declaration assignment if_action condition elif_component while_action function parameter_list assignment_operator arithmetic_operator logical_operator relational_operator expression logical_expression
ENTER EXIT BOOLEAN CHARACTER STRING INTEGER LIST IF ELSE ELIF WHILE variable constant = [ ] ( ) { } + - * / % == != <= >= < > AND OR , ;
program
program - ENTER action_list EXIT
action_block - { action_list }
action_list - action
action_list - action action_list
action - declaration ;
action - assignment ;
action - if_action ;
action - while_action ;
action - function ;
declaration - typename variable
typename - INTEGER
typename - BOOLEAN
typename - CHARACTER
typename - STRING
typename - LIST
assignment - variable assignment_operator expression
if_action - IF condition action_block
if_action - IF condition action_block ELSE action_block
if_action - IF condition action_block elif_component ELSE action_block
elif_component - ELIF condition action_block
elif_component - ELIF condition action_block elif_component
while_action - WHILE condition action_block
function - WRITE ( parameter_list )
assignment_operator - =
expression - constant
expression - variable
expression - variable [ expression ]
expression - expression arithmetic_operator expression
arithmetic_operator - +
arithmetic_operator - -
arithmetic_operator - *
arithmetic_operator - /
arithmetic_operator - %
condition - ( logical_expression )
logical_expression - expression
logical_expression - expression relational_operator expression
logical_expression - logical_expression logical_operator logical_expression
relational_operator - ==
relational_operator - !=
relational_operator - <=
relational_operator - >=
relational_operator - <
relational_operator - >
logical_operator - AND
logical_operator - OR
parameter_list - expression
parameter_list - expression , parameter_list
